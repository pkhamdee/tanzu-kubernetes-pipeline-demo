---

#
# pipeline2 has a couple more steps, including using sonarqube cloud and
# an integration test.
#

resources:

  - name: spring-petclinic-testing-branch
    type: git
    source:
      uri: ((spring-petclinic-repo-uri))
      icon: github
      branch: testing

  # - name: spring-petclinic-staging-branch
  #   type: git
  #   source:
  #     uri: ((spring-petclinic-repo-uri))
  #     icon: github
  #     branch: staging
  #     username: ((github-apptoken))
  #     password: x-oauth-basic

  - name: test-scripts
    type: git
    source:
      uri: ((test-scripts-repo-uri))
      branch: master

  # - name: code-analysis
  #   type: sonar-runner
  #   source:
  #     host_url: https://sonar.dev.pkhamdee.com:9090/
  #     login: ((sonar-authtoken))
  #     organization: ((sonar-organization))

resource_types:  

  - name: sonar-runner
    type: docker-image
    source:
      repository: cathive/concourse-sonarqube-resource
      tag: latest # For reproducible builds use a specific tag and don't rely on "latest"

jobs:

  - name: build-and-analyze
    plan:

      - get: spring-petclinic-testing-branch
        trigger: true

      - get: test-scripts

      - task: build
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: maven
              tag: 3-jdk-11-openj9
          inputs:
            - name: spring-petclinic-testing-branch
            - name: test-scripts

          outputs:
            - name: sonarqube-analysis-input
          run:
            path: test-scripts/concourse/test-scripts/build.sh
          params:
            login: ((sonar-authtoken))
            url:  https://sonar.dev.pkhamdee.com:9090
          caches:
            # This is linked in the build script to $HOME/.m2
            - path: maven

      # - put: code-analysis
      #   params:
      #     project_path: sonarqube-analysis-input
      #     project_key: petclinic
      #     sources: ["."]
      #     tests: ["."]
      #     #additional_properties:
      #       # Will be passed as "-Dsonar.javascript.lcov.reportPaths="coverage/lcov.info" to the scanner.
      #       #sonar.javascript.lcov.reportPaths: coverage/lcov.info
      #   get_params:
      #     quality_gate:
      #       ignore_errors: ['new_coverage', 'violations']
      #       ignore_warns: ['new_duplicated_lines_density', 'violations']
      # #- put: minio-s3


  # - name: maven-test
  #   public: true
  #   serial: true
  #   plan:
  #     - get: spring-petclinic-testing-branch
  #       passed:
  #         - build-and-analyze
  #       trigger: true

  #     - get: test-scripts

  #     - task: run-mvn-test
  #       config:
  #         platform: linux
  #         image_resource:
  #           type: docker-image
  #           source:
  #             repository: maven
  #             tag: 3-jdk-11-openj9
  #         inputs:
  #           - name: spring-petclinic-testing-branch
  #           - name: test-scripts
  #         run:
  #           path: test-scripts/concourse/test-scripts/unit-test.sh
  #         caches:
  #           # This is linked in the build script to $HOME/.m2
  #           - path: maven

  # - name: integration-test
  #   public: true
  #   serial: true
  #   plan:
  #     - get: spring-petclinic-testing-branch
  #       passed:
  #         - build-and-analyze
  #         - maven-test
  #       trigger: true

  #     - get: spring-petclinic-staging-branch

  #     - get: test-scripts

  #     - task: run-integration-test
  #       config:
  #         platform: linux
  #         image_resource:
  #           type: docker-image
  #           source:
  #             repository: maven
  #             tag: 3-jdk-11-openj9
  #         inputs:
  #           - name: spring-petclinic-testing-branch
  #           - name: test-scripts
  #         run:
  #           path: test-scripts/concourse/test-scripts/integration-test.sh

  #     - put: spring-petclinic-staging-branch
  #       params:
  #         repository: spring-petclinic-testing-branch
